Bundle 'endel/vim-github-colorscheme'
Bundle 'molokai'
Bundle 'altercation/vim-colors-solarized'
Bundle 'mattn/zencoding-vim'


" ********************************************************************************
" show indentation with vertical lines like the currently highlighted cursorcolumn
Bundle 'nathanaelkane/vim-indent-guides'
" set custom indent colors
"let g:indent_guides_auto_colors = 0
"autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  guibg=red   ctermbg=3
"autocmd VimEnter,Colorscheme * :hi IndentGuidesEven guibg=green ctermbg=4
" alternatively, the above two lines could be added to colorscheme
" shortcut for vim-indent-guides toggle is <leader>ig
" ********************************************************************************
" Navigation
Bundle 'terryma/vim-multiple-cursors'
Bundle 'Lokaltog/vim-easymotion'
Bundle 'coderifous/textobj-word-column.vim'
Bundle 'Shougo/unite.vim'
Bundle 'kien/ctrlp.vim'
"Bundle 'TxtBrowser'
Bundle 'vimwiki'
Bundle 'PIV'
if executable('ag')
    Bundle 'rking/ag.vim'
elseif executable('ack-grep') || executable('ack')
    Bundle 'mileszs/ack.vim'
endif
if has('ruby')
    Bundle 'benmills/vimux'
endif

Bundle 'tsaleh/vim-matchit'
Bundle 'tpope/vim-abolish'
Bundle 'AndrewRadev/splitjoin.vim'
Bundle 'Valloric/YouCompleteMe'
Bundle 'tpope/vim-speeddating'

" Language related
Bundle 'sampsyo/autolink.vim'
Bundle 'wikitopian/hardmode'

Bundle 'less.bat'
Bundle 'less-syntax'
Bundle 'Sass'
Bundle 'groenewege/vim-less'
Bundle 'kwaledesign/scss-snippets'
Bundle 'vim-scripts/vim-less'
Bundle 'aaronjensen/vim-sass-status'
Bundle 'tpope/vim-sensible'
Bundle 'tpope/vim-vividchalk'
Bundle 'vim-scripts/velocity.vim'
Bundle 'tpope/vim-repeat'
Bundle 'jistr/vim-nerdtree-tabs'

" Language related
Bundle 'less.vim'
Bundle 'tpope/vim-haml'
Bundle 'cakebaker/scss-syntax.vim'
Bundle 'chriseppstein/compass'
Bundle 'tpope/vim-rails'
Bundle 'tpope/vim-markdown'
Bundle 'pangloss/vim-javascript'
Bundle 'lepture/vim-velocity'
Bundle 'vim-scripts/vm.vim'
Bundle 'plasticboy/vim-markdown'
Bundle 'Lokaltog/vim-easymotion'
Bundle 'phpcomplete.vim'
Bundle 'php.vim'
Bundle 'phpcodesniffer.vim'
Bundle 'php.vim-html-enhanced'
Bundle 'jQuery'
Bundle 'css3'
Bundle 'jsbeautify'
Bundle 'juvenn/mustache.vim'

" show trailing whitespace and fix it
Bundle 'bronson/vim-trailing-whitespace'

"if executable('git')
"    Bundle 'tpope/vim-fugitive'
"endif

Bundle 'motemen/git-vim'

" Local bundles if avaiable
if filereadable(expand("~/.vimrc.bundles.local"))
    source ~/.vimrc.bundles.local
endif
"set statusline=%{GitBranch()}



" Use powerline to modify the statuls line
if has('gui_running') && (!has('win64') || !has('win32')) && old_powerline == 1
" let g:Powerline_symbols='unicode'
  let g:Powerline_symbols='fancy'
endif


set shortmess+=I  "don't give the intro message when starting Vim |:intro|

"set list " Show these tabs and spaces and so on
"set linebreak " Wrap long lines at a blank

" Use sane regexes
"nnoremap / /\v
"vnoremap / /\v
"cnoremap s/ s/\v
"nnoremap ? ?\v
"vnoremap ? ?\v
"cnoremap s? s?\v


" Keep search matches in the middle of the window
nnoremap n nzzzv
nnoremap N Nzzzv
nnoremap * *zzzv
nnoremap # #zzzv
nnoremap g* g*zzzv
nnoremap g# g#zzzv


" Visual search mappings
function! s:VSetSearch()
    let temp=@@
    normal! gvy
    let @/='\V'.substitute(escape(@@, '\'), '\n', '\\n', 'g')
    let @@=temp
endfunction
vnoremap * :<C-U>call <SID>VSetSearch()<CR>//<CR>
vnoremap # :<C-U>call <SID>VSetSearch()<CR>??<CR>

" Use ,Space to toggle the highlight search
" nnoremap <Leader><Space> :set hlsearch!<CR>


" Space to toggle and create folds.
" nnoremap <silent><Space> @=(foldlevel('.')?'za':"\<Space>")<CR>
vnoremap <Space> zf

" Set foldtext
function! MyFoldText()
    let line=getline(v:foldstart)
    let nucolwidth=&foldcolumn+&number*&numberwidth
    let windowwidth=winwidth(0)-nucolwidth-3
    let foldedlinecount=v:foldend-v:foldstart+1
    let onetab=strpart('          ', 0, &tabstop)
    let line=substitute(line, '\t', onetab, 'g')
    let line=strpart(line, 0, windowwidth-2-len(foldedlinecount))
    let fillcharcount=windowwidth-len(line)-len(foldedlinecount)
    return line.'…'.repeat(" ",fillcharcount).foldedlinecount.'…'.' '
endfunction
set foldtext=MyFoldText()


" file type syntax autocheck
" Perl
augroup ft_perl
    let perl_include_pod=1
    let perl_extended_vars=1
    let perl_sync_dist=250
    autocmd!
    autocmd filetype perl setlocal keywordprg=perldoc\ -f
augroup END


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"--------------------------------------------------
" => Ag(Ack)
"--------------------------------------------------

if executable('ag')
    nnoremap <Leader>a :Ag<Space>
elseif executable('ack-grep') || executable('ack')
    nnoremap <Leader>a :Ack!<Space>
endif
if !executable('ag') && has('unix') && executable('ack-grep')
    let g:ackprg='ack-grep -H --nocolor --nogroup --column'
endif

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""


"--------------------------------------------------
" => TxtBrowser
"--------------------------------------------------
let tlist_txt_settings='txt;c:content;f:figures;t:tables'
au BufRead,BufNewFile *.txt setlocal ft=txt



"--------------------------------------------------
" => Splitjoin
"--------------------------------------------------

let g:splitjoin_split_mapping = ',k'
let g:splitjoin_join_mapping = ',j'
let g:splitjoin_normalize_whitespace=1
let g:splitjoin_align=1

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""


"--------------------------------------------------
" => Unite
"--------------------------------------------------

nnoremap <Leader>m :Unite<Space>
let g:unite_update_time=4000

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"--------------------------------------------------
" => vimux
"--------------------------------------------------

"nnoremap <Leader>vp :VimuxPromptCommand<CR>
"vnoremap <Leader>vs "vy :call VimuxRunCommand(@v . "\n", 0)<CR>
"nnoremap <Leader>vx :VimuxClosePanes<CR>
"nnoremap <Leader>vq :VimuxCloseRunner<CR>
"nnoremap <Leader>vi :VimuxInspectRunner<CR>
"nnoremap <Leader>vl :VimuxRunLastCommand<CR>
"nnoremap <Leader>vc :VimuxClearRunnerHistory<CR>
"" Fix bug in ruby 1.9
"ruby << EOF
"class Object
"  def flush; end unless Object.new.respond_to?(:flush)
"end
"EOF


" highlight current column to help vertical alignment
"if !has("gui_running")
"    hi CursorColumn cterm=bold ctermbg=darkred ctermfg=white guibg=darkred guifg=white
"endif

"set noswapfile

"set autochdir
" The above autochdir command has problem when working
"       together with other plugins
" for Compatible reason, pls use the following command setting instead
autocmd BufEnter * silent! lcd %:p:h


" set up vimwiki configuration
if has("win32")
  let $VIMFILES = $VIM.'./vimfiles'
else
  let $VIMFILES = $HOME.'./vim'
endif

" start NERDTree on vimenter
"autocmd vimenter * NERDTree

let g:startify_custom_header = ["      May The FORCE Be With You! ",
      \"                 _.-~-.",
      \"               7''  Q..\\",
      \"            _7         (_",
      \"          _7  _/    _q.  /",
      \"        _7 . ___  /VVvv-'_                                            .",
      \"       7/ / /~- \\_\\\\      '-._     .-'                      /       //",
      \"      ./ ( /-~-/||'=.__  '::. '-~'' {             ___   /  //     ./{",
      \"     V   V-~-~| ||   __''_   ':::.   ''~-~.___.-'' _/  // / {_   /  {  /",
      \"      VV/-~-~-|/ \\ .'__'. '.    '::                     _ _ _        ''.",
      \"      / /~~~~||VVV/ /  \\ )  \\        _ __ ___   ___ ___(_) | | __ _   .::'",
      \"     / (~-~-~\\\\.-' /    \\'   \\::::. | '_ ` _ \\ / _ \\_  / | | |/ _` | :::'",
      \"    /..\\    /..\\__/      '     '::: | | | | | | (_) / /| | | | (_| | ::'",
      \"    vVVv    vVVv                 ': |_| |_| |_|\\___/___|_|_|_|\\__,_| ''",
      \"",
      \"",
      \]
